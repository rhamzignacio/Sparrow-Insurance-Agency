//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sparrow_Insurance_Agency
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SparrowEntities : DbContext
    {
        public SparrowEntities()
            : base("name=SparrowEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BankProfile> BankProfile { get; set; }
        public virtual DbSet<CarInsuranceCommission> CarInsuranceCommission { get; set; }
        public virtual DbSet<CarInsuranceCoverage> CarInsuranceCoverage { get; set; }
        public virtual DbSet<CarInsurancePolicy> CarInsurancePolicy { get; set; }
        public virtual DbSet<CarInsurrancePayment> CarInsurrancePayment { get; set; }
        public virtual DbSet<MakeProfile> MakeProfile { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<SalesAgent> SalesAgent { get; set; }
        public virtual DbSet<TransactionHistory> TransactionHistory { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
    
        public virtual ObjectResult<GetCarInsurancePolicyReport_Result> GetCarInsurancePolicyReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarInsurancePolicyReport_Result>("GetCarInsurancePolicyReport", fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetCarInsurancePolicyReportByCategory_Result> GetCarInsurancePolicyReportByCategory(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string category)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCarInsurancePolicyReportByCategory_Result>("GetCarInsurancePolicyReportByCategory", fromDateParameter, toDateParameter, categoryParameter);
        }
    
        public virtual ObjectResult<GetIncomeReport_Result> GetIncomeReport(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> tODate)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var tODateParameter = tODate.HasValue ?
                new ObjectParameter("TODate", tODate) :
                new ObjectParameter("TODate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetIncomeReport_Result>("GetIncomeReport", fromDateParameter, tODateParameter);
        }
    
        public virtual ObjectResult<GetInsurancePaymentReport_Result> GetInsurancePaymentReport(Nullable<System.Guid> policyNo)
        {
            var policyNoParameter = policyNo.HasValue ?
                new ObjectParameter("PolicyNo", policyNo) :
                new ObjectParameter("PolicyNo", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInsurancePaymentReport_Result>("GetInsurancePaymentReport", policyNoParameter);
        }
    
        public virtual ObjectResult<GetSalesAgentReport_Result> GetSalesAgentReport(Nullable<System.Guid> salesAgent, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var salesAgentParameter = salesAgent.HasValue ?
                new ObjectParameter("SalesAgent", salesAgent) :
                new ObjectParameter("SalesAgent", typeof(System.Guid));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesAgentReport_Result>("GetSalesAgentReport", salesAgentParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<GetSalesAgentReportByCategory_Result> GetSalesAgentReportByCategory(Nullable<System.Guid> salesAgent, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string category)
        {
            var salesAgentParameter = salesAgent.HasValue ?
                new ObjectParameter("SalesAgent", salesAgent) :
                new ObjectParameter("SalesAgent", typeof(System.Guid));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var categoryParameter = category != null ?
                new ObjectParameter("Category", category) :
                new ObjectParameter("Category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalesAgentReportByCategory_Result>("GetSalesAgentReportByCategory", salesAgentParameter, fromDateParameter, toDateParameter, categoryParameter);
        }
    }
}
